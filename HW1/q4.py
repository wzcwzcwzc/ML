# -*- coding: utf-8 -*-
"""Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Lo4v-9SN6tC8_vP3we6A1dpQxd11afa
"""

import os 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import spacy
import string
# import pickle as pkl
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer


# read file and get content of file
def getContext(file_path):
  f = open(file_path)
  s = f.read()
  f.close()
  return s

# remove punctuation and do word tokenize
def tokenize(sent):
  tokens = tokenizer(sent)
  return [token.text.lower() for token in tokens if (token.text not in punctuations)]

# put all tokens into a list 
def tokenize_dataset(sample):
    token_dataset = []
    tokens = tokenize(sample)
    token_dataset.append(tokens)
    # all_tokens += tokens
    return token_dataset

tokenizer = spacy.load('en_core_web_sm')
punctuations = string.punctuation

file_paths = ['/content/d1.txt', '/content/d2.txt', '/content/d3.txt', '/content/d4.txt',
              '/content/d5.txt']
txt_vec = []
for file_path in file_paths:
  text = getContext(file_path=file_path)
  txt_vec.append(text)

query = getContext('/content/d_query.txt')
txt_vec.append(query)
print(txt_vec)

# build world frequency matrix
def buildMatrix(corpus):
  vectorizer = CountVectorizer()
  x = vectorizer.fit_transform(corpus)
  print(vectorizer.get_feature_names())
  return x

"""Calculate tf-idf matrix"""
frequency_matrix = buildMatrix(txt_vec)
print(frequency_matrix.toarray())

tf_idf_trans = TfidfTransformer()
tf_idf_rep = tf_idf_trans.fit_transform(frequency_matrix)
print(tf_idf_rep.toarray())

# calculate cos similarity between tf-idf
# the last row of matrix is the query
def cal_cos_similarity(matrix):
  cos_lib = []
  matrix_row_length = len(matrix[-1])
  cos_query = matrix[-1].reshape(1, matrix_row_length)
  for word_freqency in matrix:
    temp = word_freqency.reshape(1, matrix_row_length)
    cos_sim = cosine_similarity(temp, cos_query)
    cos_lib.append(cos_sim)
  return cos_lib
  
cos_sim = cal_cos_similarity(frequency_matrix.toarray())
# remove the query in the matrix
cos_sim.pop()
print(cos_sim)

"""find most similar document"""
most_similar = file_paths[np.argmax(cos_sim)]
print(f'the most similar doc is {most_similar}')