# -*- coding: utf-8 -*-
"""hw3_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DM2U42GmM5Quikz24m27o0Z1QFAsm0ll
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_boston
from sklearn.preprocessing import MinMaxScaler

boston_dataset = load_boston()
boston = pd.DataFrame(boston_dataset.data, columns=boston_dataset.feature_names) 
boston['MEDV'] = boston_dataset.target 
boston.head()

"""for one time experiment on Linear Regression and Ridge Regression"""

y_field = boston['MEDV']
x_field = boston.drop('MEDV', axis=1)

# do preprocess on data with scaler
# mm = MinMaxScaler()
# x_field = mm.fit_transform(x_field)
# y_field = mm.fit_transform(y_field)

X_train, X_test, Y_train, Y_test = train_test_split(x_field, y_field, test_size=0.2, random_state=None)

reg = LinearRegression()
reg.fit(X_train, Y_train)

rr = Ridge(alpha=0.01)
rr.fit(X_train, Y_train)

train_score = reg.score(X_train, Y_train)
test_score = reg.score(X_test, Y_test)

rr_train_score = rr.score(X_train, Y_train)
rr_test_score = rr.score(X_test, Y_test)

print(f'Linear regression train score: {train_score}')
print(f'Linear regression test score: {test_score}')
print(f'Ridge regression train score: {rr_train_score}')
print(f'Ridge regression test score: {rr_test_score}')

"""for 10-fold experiment"""

R_square = []
for i in range(0, 9):
  X_train, X_test, Y_train, Y_test = train_test_split(x_field, y_field, test_size=0.2, random_state=None)
  rr = Ridge(alpha=0.01)
  # train the model
  rr.fit(X_train, Y_train)
  # evaluate the model
  res = rr.score(X_test, Y_test)
  R_square.append(res)

print(f'the R_square value of each time are {R_square}', R_square)